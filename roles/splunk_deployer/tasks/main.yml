---
- name: Get current shcluster config
  command: "{{ splunk.exec }} btool server list shclustering"
  become: true
  become_user: "{{ splunk.user }}"
  register: deployer_shcluster_config
  changed_when: false
  ignore_errors: true

- name: Decrypt current indexer cluster pass4SymmKey
  command: "{{ splunk.exec }} show-decrypted --value '{{ encrypted_key }}'"
  register: dp_decrypted_key_result
  changed_when: false
  ignore_errors: true
  no_log: "{{ hide_password }}"
  vars:
    encrypted_key: "{{ deployer_shcluster_config.stdout_lines | select('match', 'pass4SymmKey = ')|list|first|default('') | regex_replace('^pass4SymmKey = (.*)$', '\\1') }}"
  when:
    - deployer_shcluster_config.rc == 0
    - encrypted_key|default('')|length > 0

# TODO: Maybe we can make this a REST call?
- name: Set deployer SHC key and label
  ini_file:
    dest: "{{ splunk.home }}/etc/system/local/server.conf"
    section: shclustering
    option: "{{ item.opt }}"
    value: "{{ item.val }}"
    mode: 0644
  with_items:
    - { opt: 'pass4SymmKey', val: '{{ splunk.shc.pass4SymmKey }}' }
    - { opt: 'shcluster_label', val: '{{ splunk.shc.label }}' }
  loop_control:
    label: "{{ item.opt }}"
  become: yes
  become_user: "{{ splunk.user }}"
  no_log: "{{ hide_password }}"
  notify:
    - Restart the splunkd service
  when: >
    (dp_decrypted_key_result is skipped)
    or (dp_decrypted_key_result.rc != 0)
    or (dp_decrypted_key_result.stdout != splunk.shc.pass4SymmKey)
    or ('shcluster_label = ' + splunk.shc.label|string not in deployer_shcluster_config.stdout_lines)

# https://docs.splunk.com/Documentation/Splunk/latest/DistSearch/PropagateSHCconfigurationchanges#Set_the_deployer_push_mode
- name: Set deployer push mode
  uri:
    url: "{{ cert_prefix }}://127.0.0.1:{{ splunk.svc_port }}/servicesNS/nobody/system/configs/conf-app/shclustering"
    method: POST
    user: "{{ splunk.admin_user }}"
    password: "{{ splunk.password }}"
    validate_certs: false
    body:
      deployer_push_mode: "{{ splunk.shc.deployer_push_mode }}"
    body_format: "form-urlencoded"
    status_code: 200
    timeout: 10
  when: "'deployer_push_mode' in splunk.shc and splunk.shc.deployer_push_mode"
  no_log: "{{ hide_password }}"

- name: Flush restart handlers
  meta: flush_handlers

- name: Wait for SHC to be ready
  shc_ready:
    captain_url="{{ splunk.search_head_captain_url }}"
    shc_peers="{{ groups['splunk_search_head'] }}"
    spl_user="{{ splunk.admin_user }}"
    spl_pass="{{ splunk.password }}"
  no_log: "{{ hide_password }}"
  register: task_result
  until: task_result.rc == 0
  retries: "{{ shc_sync_retry_num }}"
  delay: "{{ retry_delay }}"
  when:
    - splunk_search_head_cluster | bool
    - splunk.apps_location

- include_tasks: ../../../roles/splunk_common/tasks/provision_apps.yml
  when:
    - splunk.apps_location
    - splunk.deployment_server is not defined or not splunk.deployment_server

- include_tasks: ../../../roles/splunk_common/tasks/set_as_deployment_client.yml
  when: splunk.deployment_server is defined and splunk.deployment_server

- include_tasks: push_apps_to_search_heads.yml
  when:
    - splunk.apps_location

- include_tasks: ../../../roles/splunk_common/tasks/disable_installed_apps.yml
  when:
    - splunk.apps_location

- include_tasks: ../../../roles/splunk_common/tasks/check_for_required_restarts.yml
